###################
# my bosun config #
###################
# TODO:
#   add docu

#############
# templates #
#############

#template logstash {
#    subject = `
#        {
#            "Summary": "{{ .Alert.Name }}",
#            "SourceAlertKey": "Bosun",
#            "SourceSeverity": "Critical",
#            "SourceIdentifier": "Identifier",
#            "SourceEventID": "1455867577750",
#            "Severity": "{{ if eq (print .Alert.Warn) .Result.Expr }}1{{ else }}3{{ end }}",
#            "LastOccurrence": {{.Start}},
#            "SourceCIName": "server.langer.lan",
#            "Status": 1,
#            "SourceID": 10
#        }
#    `
#}

#notification logstash{
#    post = http://logstash:8080
#    body = json={"subject":"{{.}}"}
#}

#alert logstash.alert {
#    template = logstash
#    $q = avg(q("sum:rate:container.cpu{stack=*}", "1h", ""))
#    crit = $q > 1000
#    critNotification = logstash
#    warn = $q <= 1000
#    warnNotification = logstash
#}

notification default {
	email   = langer.markus@gmail.com
	print   = true
	next    = default
    timeout = 1d
}

template ut {
    subject = {{.Name}}: {{.Group | len}} unknown alerts
        body = `
            <p>Time: {{.Time}}
            <p>Name: {{.Name}}
            <p>Alerts:
            {{range .Group}}
            <br>{{.}}
    {{end}}`
}

unknownTemplate = ut

template generic {
	body = `<a href="{{.Ack}}">Acknowledge alert</a>
	<p>Alert definition:
	<p>Name: {{.Alert.Name}}
	<p>Crit: {{.Alert.Crit}}
	<p>Tags
	<table>
		{{range $k, $v := .Group}}
			{{if eq $k "host"}}
				<tr><td>{{$k}}</td><td><a href="{{$.HostView $v}}">{{$v}}</a></td></tr>
			{{else}}
				<tr><td>{{$k}}</td><td>{{$v}}</td></tr>
			{{end}}
		{{end}}
	</table>

	<p>Computation
	<table>
		{{range .Computations}}
			<tr><td>{{.Text}}</td><td>{{.Value}}</td></tr>
		{{end}}
	</table>
	</br>
	{{.Graph .Alert.Vars.metric}}`
	subject = {{.Last.Status}}: {{.Alert.Name}}: {{.Eval .Alert.Vars.q}} on {{.Group.host}}
}

template name {
	body = Name: {{.Alert.Name}}
}

template ex {
	body = `Alert definition:
	{{template "name" .}}
	Crit: {{.Alert.Crit}}

	Tags:{{range $k, $v := .Group}}
	{{$k}}: {{$v}}{{end}}
	{{.Graph .Alert.Vars.metric}}
	`
	subject = {{.Alert.Name}}: {{.Eval .Alert.Vars.q }} on {{.Group.host}}
}

##############
# mem_checks #
##############

#telegraf.mem_active
#telegraf.mem_available
#telegraf.mem_buffered
#telegraf.mem_cached
#telegraf.mem_free
#telegraf.mem_inactive
#telegraf.mem_total
#telegraf.mem_used
#telegraf.mem_used_percent
#telegraf.mem_available_percent

alert unix.memory {
	template = ex
	$metric = q("sum:telegraf.mem_used_percent{host=*}", "1h", "")
	$q = avg($metric)
	crit = $q > 99
	warn = $q > 98
    warnNotification = default
    critNotification = default
}

###############
# check_ports #
###############

alert ports_updates {
	template = ex
	$metric = q("sum:telegraf.ports_total_updates_value{host=*}", "5m", "")
	$q = avg($metric)
	crit = $q > 5
	warn = $q > 2
    warnNotification = default
    critNotification = default
}

alert ports_security {
	template = ex
	$metric = q("sum:telegraf.ports_security_problems_value{host=*}", "5m", "")
	$q = avg($metric)
	crit = $q >= 1
	warn = $q >= 1
    warnNotification = default
    critNotification = default
}

##############
# cpu_checks #
##############

alert cpu {
	template = ex
	$metric_system     = avg(q("sum:telegraf.cpu_usage_system{host=*,cpu=*}",     "120m", ""))
	$metric_guest      = avg(q("sum:telegraf.cpu_usage_guest{host=*,cpu=*}",      "120m", ""))
	$metric_irq        = avg(q("sum:telegraf.cpu_usage_irq{host=*,cpu=*}",        "120m", ""))
	$metric_softirq    = avg(q("sum:telegraf.cpu_usage_softirq{host=*,cpu=*}",    "120m", ""))
	$metric_guest_nice = avg(q("sum:telegraf.cpu_usage_guest_nice{host=*,cpu=*}", "120m", ""))
	$metric_iowait     = avg(q("sum:telegraf.cpu_usage_iowait{host=*,cpu=*}",     "120m", ""))
	$metric_nice       = avg(q("sum:telegraf.cpu_usage_nice{host=*,cpu=*}",       "120m", ""))
	$metric_steal      = avg(q("sum:telegraf.cpu_usage_steal{host=*,cpu=*}",      "120m", ""))
	$metric_user       = avg(q("sum:telegraf.cpu_usage_user{host=*,cpu=*}",       "120m", ""))
	$metric_idle       = avg(q("sum:telegraf.cpu_usage_idle{host=*,cpu=*}",       "120m", ""))
	
	crit =  $metric_system > 80 || $metric_guest > 80 || $metric_irq > 80 || $metric_softirq > 80 || $metric_guest_nice > 80 || $metric_iowait > 80 || $metric_nice > 80 || $metric_steal > 80 || $metric_user > 80 || $metric_idle < 20
	warn =  $metric_system > 60 || $metric_guest > 60 || $metric_irq > 60 || $metric_softirq > 60 || $metric_guest_nice > 60 || $metric_iowait > 60 || $metric_nice > 60 || $metric_steal > 60 || $metric_user > 60 || $metric_idle < 40
    warnNotification = default
    critNotification = default
}


###############
# load checks #
###############

alert unix_load_short {
    template = generic
    $cpus = avg(q("sum:telegraf.system_n_cpus{host=*}", "5m", ""))
    $metric = q("sum:telegraf.system_load1{host=*}", "5m", "")
    $q = avg($metric)
    crit = $q > ($cpus * 2)
    warn = $q > ($cpus * 1.9)
	warnNotification = default
	critNotification = default
}

alert unix_load_middle {
    template = generic
    $cpus = avg(q("sum:telegraf.system_n_cpus{host=*}", "5m", ""))
    $metric = q("sum:telegraf.system_load5{host=*}", "5m", "")
    $q = avg($metric)
    crit = $q > ($cpus * 1.4)
    warn = $q > ($cpus * 1.3)
	warnNotification = default
	critNotification = default
}

alert unix_load_long {
    template = generic
    $cpus = avg(q("sum:telegraf.system_n_cpus{host=*}", "5m", ""))
    $metric = q("sum:telegraf.system_load15{host=*}", "5m", "")
    $q = avg($metric)
    crit = $q > ($cpus * 1.3)
    warn = $q > ($cpus * 1.2)
	warnNotification = default
	critNotification = default
}

################
# cisco checks #
################

alert cisco.cpu_short {
	template = ex
	$metric = q("sum:telegraf.snmp_cpmCPUTotal5sec{host=*}", "5m", "")
	$q = avg($metric)
	crit = $q > 85
	warn = $q > 80
    warnNotification = default
    critNotification = default
}

alert cisco.cpu_middle {
	template = ex
	$metric = q("sum:telegraf.snmp_cpmCPUTotal1min{host=*}", "5m", "")
	$q = avg($metric)
	crit = $q > 80
	warn = $q > 75
    warnNotification = default
    critNotification = default
}

alert cisco.cpu_long {
	template = ex
	$metric = q("sum:telegraf.snmp_cpmCPUTotal1min{host=*}", "5m", "")
	$q = avg($metric)
	crit = $q > 75
	warn = $q > 70
    warnNotification = default
    critNotification = default
}

############
# hardware #
############

template hardware {
    body = `
    <style>
    table {
        border-collapse: collapse;
    }
    th,td {
        text-align: left;
        padding-right: 8px;
    }
    </style>
    <p>Overall System status is  {{if gt .Value 1.0}} <span style="color: red;">Bad</span>
              {{else}} <span style="color: green;">Ok</span>
              {{end}}</p>
    
    <h3>Power Supplies</h3>
    <table>
    <tr><th>Power Supply Name:</th><th>Status:</th><th>Watt:</th></tr>
    {{ range $r := .LeftJoin .Alert.Vars.power .Alert.Vars.power_val }}
    	{{ $power     := index $r 0 }}
		{{ $power_val := index $r 1 }}
            <tr>
              <td>{{$power.Group.name}}</td>
              {{if lt $power.Value 1.0}} <td style="color: red;">Bad</td>
              {{else}} <td style="color: green;">Ok</td>
              {{end}}
              <td>{{$power_val.Value}}</td>
            </tr>
    {{end}}
    </table>
    
    <h3>Fan Blocks</h3>
    <table>
    <tr><th>Fan Blocks Name</th><th>Status</th></tr>
    {{range $r := .EvalAll .Alert.Vars.fanblocks}}
        {{if eq $r.Group.host $.Group.host}}
            <tr>
              <td>{{$r.Group.name}}</td>
              {{if lt $r.Value 1.0}} <td style="color: red;">Bad</td>
              {{else}} <td style="color: green;">Ok</td>
              {{end}}
            </tr>
        {{end}}
    {{end}}
    </table>
    
    <h3>Temp Sensors</h3>
    <table>
    <tr><th>Temp Sensor Name</th><th>Status</th><th>Temp:</th></tr>
    {{ range $r := .LeftJoin .Alert.Vars.temp .Alert.Vars.temp_val }}
    	{{ $temp     := index $r 0 }}
		{{ $temp_val := index $r 1 }}
            <tr>
              <td>{{$temp.Group.name}}</td>
              {{if lt $temp.Value 1.0}} <td style="color: red;">Bad</td>
              {{else}} <td style="color: green;">Ok</td>
              {{end}}
              <td>{{$temp_val.Value}}</td>
            </tr>
    {{end}}
    </table>

    <h3>Controller</h3>
    <table>
    <tr><th>Controller Name</th><th>Status</th></tr>
    {{range $r := .EvalAll .Alert.Vars.controllerbay}}
      {{if eq $r.Group.host $.Group.host}}
            <tr>
              <td>{{$r.Group.name}}</td>
              {{if lt $r.Value 1.0}} <td style="color: red;">Bad</td>
              {{else}} <td style="color: green;">Ok</td>
              {{end}}
            </tr>
        {{end}}
    {{end}}
    </table>
    `
    subject = {{.Last.Status}}: {{replace .Alert.Name "." " " -1}}: on {{.Group.host}}
}


alert hardware {
    template = hardware
    $time = "30m"
    #By Component
    $power         = avg(q("sum:telegraf.ipmi_sensor_status{host=*,name=power_supply_*}", $time, ""))
    $power_val     = avg(q("sum:telegraf.ipmi_sensor_value{host=*,name=power_supply_*}", $time, ""))
    $fanblocks     = avg(q("sum:telegraf.ipmi_sensor_status{host=*,name=fan_block_*}", $time, ""))
    $temp          = avg(q("sum:telegraf.ipmi_sensor_status{host=*,name=temp_*}", $time, ""))
    $temp_val      = avg(q("sum:telegraf.ipmi_sensor_value{host=*,name=temp_*}", $time, ""))
    $controllerbay = avg(q("sum:telegraf.ipmi_sensor_status{host=*,name=cntlr_*}", $time, ""))
    $system        = avg(q("sum:telegraf.ipmi_sensor_status{host=*,name=*}", $time, ""))
    #Component Summary Per Host
    $s_power= sum(t($power, "host"))
    $s_fanblocks = sum(t($fanblocks, "host"))
    
    warn = $system < 1
}

#################
# disk forecast #
#################
template header {
    body = `<p><a href="{{.Ack}}">Acknowledge alert</a>
    <p><a href="{{.Rule}}">View the Rule + Template in the Bosun's Rule Page</a>
    {{if .Alert.Vars.notes}}
    <p>Notes: {{.Alert.Vars.notes}}
    {{end}}
    {{if .Group.host}}
    <p><a href="http://tsdbmaster1s.eb.lan.at:8070/dashboard/node?node={{.Group.host}}">View Host {{.Group.host}} in Opserver</a>
    {{end}}
    `
}

template diskspace {
    body = `{{template "header" .}}
    <p>Host: <a href="{{.HostView .Group.host | short }}">{{.Group.host}}</a>
    <br>Disk: {{.Group.path}}

    <p>Percent Free: {{.Eval .Alert.Vars.percent_free | printf "%.2f"}}%
    <br>Used: {{.Eval .Alert.Vars.used | bytes}}
    <br>Total: {{.Eval .Alert.Vars.total | bytes}}
    <br>Est. {{.Eval .Alert.Vars.days_to_zero | printf "%.2f"}} days remain until 0% free space
    {{/* .Graph .Alert.Vars.percent_free_graph */}}
    {{printf "(100 - q(\"avg:1h-min:telegraf.disk_used_percent{host=%s,path=%s}\", \"7d\", \"\"))" .Group.host .Group.path | .Graph}}
    `
    subject = {{.Last.Status}}: Diskspace: ({{.Alert.Vars.used | .Eval | bytes}}/{{.Alert.Vars.total | .Eval | bytes}}) {{.Alert.Vars.percent_free | .Eval | printf "%.2f"}}% Free on {{.Group.host}}:{{.Group.disk}} (Est. {{.Eval .Alert.Vars.days_to_zero | printf "%.2f"}} days remain)
}

lookup disk_space {
    entry host=at-vie-fw01.langer.lan,path=*,fstype=ufs {
        warn_percent_free = 20
        crit_percent_free = 5
    }
    entry host=*,path=*,fstype=* {
        warn_percent_free = 10
        crit_percent_free = 5
    }
}

alert forecast_diskspace {
    template = diskspace
    $filter = host=*,path=*,fstype=literal_or(ufs|xfs|zfs)

    $days_to_zero = (forecastlr(q("avg:6h-avg:telegraf.disk_used_percent{$filter}", "14d", ""), 100) / 60 / 60 / 24)
    $warn_days = $days_to_zero > 0 && $days_to_zero < 7
    $crit_days =   $days_to_zero > 0 && $days_to_zero < 1
    
    ##Percent Free Section
    $pf_time = "5m"
    $percent_free = ( 100 - avg(q("avg:telegraf.disk_used_percent{$filter}", $pf_time, "")))
    $used = avg(q("avg:telegraf.disk_used{$filter}", $pf_time, ""))
    $total = avg(q("avg:telegraf.disk_total{$filter}", $pf_time, ""))
    $warn_percent = $percent_free <  lookup("disk_space", "warn_percent_free")
    #Linux stops root from writing at less than 5%
    $crit_percent = $percent_free <  lookup("disk_space", "crit_percent_free")
    #For graph (long time)
    $percent_free_graph = q("avg:1h-min:os.disk.fs.percent_free{host=*,disk=*}", "14d", "")
    
    ##Main Logic
    warn = $warn_percent || $warn_days
    crit = $crit_percent || $crit_days
    #warn = $warn_days
    #crit = $crit_days
    ##Options
    #squelch = $disk_squelch
    ignoreUnknown = true
    #This is needed because disks go away when the forecast doesn't
    unjoinedOk = true
    
}